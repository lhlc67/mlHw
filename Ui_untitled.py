# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\work\project\py\code\practice\pyqt\pywhv2\untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
import numpy as np
import pandas as pd
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.pyplot  as plt

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox,QInputDialog,QFileDialog,QWidget, QButtonGroup
import processing
import clf

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(761, 565)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 321, 51))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_file = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_file.setObjectName("pushButton_file")
        self.horizontalLayout.addWidget(self.pushButton_file)
        self.lineEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 110, 169, 136))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.radioButton_4 = QtWidgets.QRadioButton(self.gridLayoutWidget)
        self.radioButton_4.setObjectName("radioButton_4")
        self.gridLayout.addWidget(self.radioButton_4, 2, 0, 1, 1)
        self.radioButton = QtWidgets.QRadioButton(self.gridLayoutWidget)
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName("radioButton")
        self.gridLayout.addWidget(self.radioButton, 0, 0, 1, 1)
        self.radioButton_3 = QtWidgets.QRadioButton(self.gridLayoutWidget)
        self.radioButton_3.setObjectName("radioButton_3")
        self.gridLayout.addWidget(self.radioButton_3, 1, 0, 1, 1)
        self.radioButton_2 = QtWidgets.QRadioButton(self.gridLayoutWidget)
        self.radioButton_2.setObjectName("radioButton_2")
        self.gridLayout.addWidget(self.radioButton_2, 4, 0, 1, 1)
        self.radioButton_5 = QtWidgets.QRadioButton(self.gridLayoutWidget)
        self.radioButton_5.setObjectName("radioButton_5")
        self.gridLayout.addWidget(self.radioButton_5, 3, 0, 1, 1)
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(10, 400, 171, 71))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.radioButton_7 = QtWidgets.QRadioButton(self.gridLayoutWidget_2)
        self.radioButton_7.setObjectName("radioButton_7")
        self.gridLayout_2.addWidget(self.radioButton_7, 2, 0, 1, 1)
        self.radioButton_6 = QtWidgets.QRadioButton(self.gridLayoutWidget_2)
        self.radioButton_6.setObjectName("radioButton_6")
        self.gridLayout_2.addWidget(self.radioButton_6, 2, 2, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_2.addWidget(self.lineEdit_2)
        self.gridLayout_2.addLayout(self.horizontalLayout_2, 5, 0, 1, 3)
        self.radioButton_8 = QtWidgets.QRadioButton(self.gridLayoutWidget_2)
        self.radioButton_8.setObjectName("radioButton_8")
        self.gridLayout_2.addWidget(self.radioButton_8, 2, 1, 1, 1)
        self.gridLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget_3.setGeometry(QtCore.QRect(200, 90, 541, 431))
        self.gridLayoutWidget_3.setObjectName("gridLayoutWidget_3")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.gridLayoutWidget_3)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 370, 101, 31))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 80, 141, 31))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(340, 0, 391, 81))
        font = QtGui.QFont()
        font.setFamily("Adobe Heiti Std")
        font.setPointSize(11)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(10, 250, 171, 31))
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(10, 330, 171, 31))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.lineEdit_3.setText("")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.horizontalLayout_3.addWidget(self.lineEdit_3)
        self.pushButton_3 = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_3.addWidget(self.pushButton_3)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 300, 141, 31))
        self.label_5.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_5.setTextFormat(QtCore.Qt.AutoText)
        self.label_5.setObjectName("label_5")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 480, 171, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 761, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.figure=plt.figure(facecolor='#FFD7C4')
        self.canves=FigureCanvas(self.figure)
        self.gridLayout_3.addWidget(self.canves)
        
        # 预处理算法选择按钮组
        self.pre_btngroup = QButtonGroup(self)
        self.pre_btngroup.addButton(self.radioButton, 1)
        self.pre_btngroup.addButton(self.radioButton_2, 2)
        self.pre_btngroup.addButton(self.radioButton_3, 3)
        self.pre_btngroup.addButton(self.radioButton_4, 4)
        self.pre_btngroup.addButton(self.radioButton_5, 5)
        
        # 分类算法选择按钮组
        self.clf_btngroup = QButtonGroup(self)
        self.clf_btngroup.addButton(self.radioButton_6, 6)
        self.clf_btngroup.addButton(self.radioButton_7, 7)
        self.clf_btngroup.addButton(self.radioButton_8, 8)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "机器学习导引-课程设计-陈永琦"))
        self.pushButton_file.setText(_translate("MainWindow", "选择文件"))
        self.radioButton_4.setText(_translate("MainWindow", "二阶差分"))
        self.radioButton.setText(_translate("MainWindow", "原始数据"))
        self.radioButton_3.setText(_translate("MainWindow", "一阶差分"))
        self.radioButton_2.setText(_translate("MainWindow", "多元散射校正"))
        self.radioButton_5.setText(_translate("MainWindow", "均值中心化"))
        self.radioButton_7.setText(_translate("MainWindow", "SVM"))
        self.radioButton_6.setText(_translate("MainWindow", "KNN"))
        self.label.setText(_translate("MainWindow", "准确率："))
        self.radioButton_8.setText(_translate("MainWindow", "RF"))
        self.label_2.setText(_translate("MainWindow", "分类算法选择"))
        self.label_3.setText(_translate("MainWindow", "预处理算法选择"))
        self.label_4.setText(_translate("MainWindow", "文件为csv或xlsx格式，横轴代表光谱信息，标签放在第一列"))
        self.pushButton.setText(_translate("MainWindow", "确定"))
        self.lineEdit_3.setPlaceholderText(_translate("MainWindow", "可选参数"))
        self.pushButton_3.setText(_translate("MainWindow", "确定"))
        self.label_5.setText(_translate("MainWindow", "PCA提取特征波段（数字）"))
        self.pushButton_2.setText(_translate("MainWindow", "确定"))

        

class DataLoader:
    def __init__(self):
        super().__init__()
        self.datapath=''
        
    def dataload(self,filepath):
        filetype = os.path.basename(filepath).split(".")[1]
        if filetype == 'xlsx':
            data = pd.read_excel(filepath)
        elif filetype == 'csv':
            data = pd.read_csv(filepath)
        else:
            print("文件类型出错")
        # data = pd.read_csv(filepath)
        # Get reference values
        y = data.values[:,1]
        # Get spectra
        X = data.values[:,2:] 
        # Get wavelengths
        wl = np.arange(1100,2300,2)
        return X,y

class MyMainForm(QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MyMainForm, self).__init__(parent)
        self.setupUi(self)
        self.pushButton_file.clicked.connect(self.openFile)
        self.pushButton.clicked.connect(self.Drawlib)
        self.pushButton_2.clicked.connect(self.Classfication)
        self.pushButton_3.clicked.connect(self.BandSelect)
        self.clfdata = 0
        self.ydata = 0
        self.selectnums = -1

    def openFile(self):
        get_filenames_path, ok = QFileDialog.getOpenFileNames(self,
                                    "选取文件",
                                   "./",
                                    "Text Files (*.csv);;Text Files (*.xlsx)")
        if ok:
            self.lineEdit.setText(str(' '.join(get_filenames_path)))
        return get_filenames_path


    def Drawlib(self):
        # print(self.pre_btngroup.checkedButton().text())
        print("按下了：",self.pre_btngroup.checkedId())
        pregress_type = self.pre_btngroup.checkedId()
        prenamelist = ['原始光谱','多元散射校正','一阶中心差分','二阶中心差分','均值中心化']
        data = DataLoader()
        path = self.lineEdit.text()
        # print(path)
        X, y = data.dataload(path)
        
        if pregress_type == 2:
            X = processing.msc(X)
            print(X)
        elif pregress_type == 3:
            X = processing.D1(X)
        elif pregress_type == 4:
            X = processing.D2(X)
        elif pregress_type == 5:
            X = processing.mean_centralization(X)
        
        
        self.clfdata = X
        self.ydata = y
        # self.PlotSpectrum(X,'原始光谱',0, 5)
        self.PlotSpectrum(X,prenamelist[pregress_type - 1],0, 5)
        self.canves.draw()


    def BandSelect(self):
        if self.lineEdit_3.text():
            nums = int(self.lineEdit_3.text())
            if nums < 0 or nums > 100:
                QMessageBox.about(self, "系统提示", "波段选择设置不合理，请确保nums>0&&nums<100")
            else:
                self.selectnums = nums
        else:
            self.selectnums = -1

    def Classfication(self):
        clf_type = self.clf_btngroup.checkedId()
        # print(clf_type)
        print(self.clfdata.shape)
        print(self.selectnums)
        if self.selectnums != -1:
            self.clfdata = clf.Pca(self.clfdata, nums=self.selectnums)
        
        print(self.clfdata.shape)
        acc = clf.train(self.clfdata, self.ydata, clf_type)
        self.lineEdit_2.setText(str(acc)+'%')
        
    def PlotSpectrum(self, spec, title='原始光谱', x=0, m=5):
        """
        :param spec: shape (n_samples, n_features)
        :return: plt
        """
        plt.clf()
        if isinstance(spec, pd.DataFrame):
            spec = spec.values
        spec = spec[:, :(spec.shape[1]-1)]
        plt.rcParams['font.sans-serif'] = ['SimHei']  # 用来正常显示中文标签
        plt.rcParams['axes.unicode_minus'] = False  # 用来正常显示负号
        # wl = np.linspace(x, x+(spec.shape[1]-1)*m,spec.shape[1])
        wl = np.linspace(1100,2300,spec.shape[1])
        with plt.style.context(('ggplot')):
            fonts = 6
            # plt.figure(figsize=(5.2, 3.1), dpi=200)
            plt.plot(wl, spec.T)
            plt.xlabel('Wavelength (nm)')
            plt.ylabel('absorbance')
            plt.title(title, fontsize=fonts)
            # plt.show()